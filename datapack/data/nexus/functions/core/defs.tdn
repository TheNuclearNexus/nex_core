@on compile

define objective nex.id
define objective nex.data
define objective nex.data1
define objective nex.data2
define objective nex.p.walk minecraft.custom:minecraft.walk_one_cm
define objective nex.p.sprint minecraft.custom:minecraft.sprint_one_cm
define objective nex.p.crouch minecraft.custom:minecraft.crouch_one_cm
define objective nex.p.swim minecraft.custom:minecraft.swim_one_cm
define objective nex.p.fly minecraft.custom:minecraft.fly_one_cm
define objective nex.p.aviate minecraft.custom:minecraft.aviate_one_cm

define objective nex.sneak minecraft.custom:minecraft.sneak_time

define objective nex.b.spawner minecraft.mined:minecraft.spawner

define objective nex.p.death deathCount

define global class ResourceChunk {
    private var _chunk : list
    private var _shulkerbox : list = [1, 0, 1]
    private var _sign : list = [2, 0, 2]
    private var _endgateway : list = [3, 1, 3]
    
    public chunk {
        get : coordinates {
            return coordinates<0 0 0>
                .deriveMagnitude(_chunk[0], Axis.X)
                .deriveMagnitude(_chunk[1], Axis.Y)
                .deriveMagnitude(_chunk[2], Axis.Z)
        }
    }
    
    public shulkerBox {
        get : coordinates {
            return coordinates<0 0 0>
                .deriveMagnitude(_chunk[0] + _shulkerbox[0], Axis.X)
                .deriveMagnitude(_chunk[1] + _shulkerbox[1], Axis.Y)
                .deriveMagnitude(_chunk[2] + _shulkerbox[2], Axis.Z)
        }
    }
    public sign {
        get : coordinates {
            return coordinates<0 0 0>
                .deriveMagnitude(_chunk[0] + _sign[0], Axis.X)
                .deriveMagnitude(_chunk[1] + _sign[1], Axis.Y)
                .deriveMagnitude(_chunk[2] + _sign[2], Axis.Z)
        }
    }
    public endGateway {
        get : coordinates {
            return coordinates<0 0 0>
                .deriveMagnitude(_chunk[0] + _endgateway[0], Axis.X)
                .deriveMagnitude(_chunk[1] + _endgateway[1], Axis.Y)
                .deriveMagnitude(_chunk[2] + _endgateway[2], Axis.Z)
        }
    }
    
    public new(chunk : coordinates) {
        eval _chunk = [chunk.getMagnitude(Axis.X), chunk.getMagnitude(Axis.Y), chunk.getMagnitude(Axis.Z)]
    }
    
    public new(x : int, y : int, z : int) {
        eval _chunk = [x,y,z]
    }
    
    public forceload() {
        forceload add ${chunk}
    }
}

global final var chunk : ResourceChunk = new ResourceChunk(420000, 0, 420000)